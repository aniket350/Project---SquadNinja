package com.stackroute.recommendedqueryservice.service;

import com.stackroute.recommendedqueryservice.domain.ServiceProvider;
import com.stackroute.recommendedqueryservice.domain.Skills;
import com.stackroute.recommendedqueryservice.repository.TeamRecommendationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
/**
 * @Service indicates annotated class is a service which hold business logic in the Service layer
 */
@Service
public class RecommendedTeamServiceImpl implements RecommendedTeamService {
    private TeamRecommendationRepository teamRecommendationRepository;
    List<ServiceProvider> x;

    /**
     * Constructor based Dependency injection to inject TeamRecommendationRepository here
     */
    @Autowired
    public RecommendedTeamServiceImpl(TeamRecommendationRepository teamRecommendationRepository, List<ServiceProvider> x) {
        this.teamRecommendationRepository = teamRecommendationRepository;
        this.x = x;
    }
    /**
     * Implementation of getTeam method
     */
    @Override
    public List<ServiceProvider> getTeam(String title, String roleName) {
        List<ServiceProvider> serviceProvider1 = teamRecommendationRepository.findTeam(title, roleName.toLowerCase());
        return serviceProvider1;
    }

    /**
     * Implementation of getTeamBasedOnAppliedIdea method
     */
    @Override
    public List<ServiceProvider> getTeamBasedOnAppliedIdea(String title, String roleName) {
        List<ServiceProvider> sp = teamRecommendationRepository.findTeamBasedOnAppliedIdea(title, roleName.toLowerCase());
        return sp;
    }
    /**
     * Implementation of getTeamBasedOnWorkedOnIdea method
     */
    @Override
    public List<ServiceProvider> getTeamBasedOnWorkedOnIdea(String title, String roleName) {
        System.out.println("rolename"+roleName);
        List<ServiceProvider> serviceProvider2 = teamRecommendationRepository.findTeamBasedOnWorkedOnIdea(title, roleName.toLowerCase());
        return serviceProvider2;
    }
    /**
     * Implementation of getAutogeneratedTeam method
     */
    @Override
    public List<ServiceProvider> getAutogeneratedTeam(String title, String roleName) {
        List<ServiceProvider> sp1 = teamRecommendationRepository.findTeam(title, roleName.toLowerCase());
        List<ServiceProvider> sp2 = teamRecommendationRepository.findTeamBasedOnAppliedIdea(title, roleName.toLowerCase());
        List<ServiceProvider> sp3 = teamRecommendationRepository.findTeamBasedOnWorkedOnIdea(title, roleName.toLowerCase());
        x.addAll(sp1);
        for(int i=0;i<sp1.size();i++){
            for(int j=0;j<sp2.size();j++){
                String emailsp2=sp2.get(j).getEmail();
            if(!sp1.get(i).getEmail().equals(emailsp2)){
                x.add(sp2.get(j));
            }
            }
        }
       return  x;    }

}
